#include <iostream>
#include <vector>
#include <unordered_map>
#include <algorithm>

// Function to check if majority element exists
int findMajorityElement(const std::vector<int>& arr) {
    std::unordered_map<int, int> counts;

    for (int num : arr) {
        counts[num]++;
        if (counts[num] > arr.size() / 2) {
            return num;
        }
    }

    return -1;
}

// Function to find the median of the array
double findMedian(const std::vector<int>& arr) {
    std::vector<int> sortedArr = arr;
    std::sort(sortedArr.begin(), sortedArr.end());

    int size = sortedArr.size();
    if (size % 2 == 0) {
        return (sortedArr[size / 2 - 1] + sortedArr[size / 2]) / 2.0;
    } else {
        return sortedArr[size / 2];
    }
}

int main() {
    // Example usage
    std::vector<int> arr = {3, 1, 3, 3, 2, 3, 4, 3, 5};
    
    int majorityElement = findMajorityElement(arr);
    if (majorityElement != -1) {
        std::cout << "Majority Element: " << majorityElement << std::endl;
    } else {
        std::cout << "No Majority Element Found" << std::endl;
    }
    
    double median = findMedian(arr);
    std::cout << "Median: " << median << std::endl;
    
    return 0;
}
