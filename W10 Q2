#include <iostream>
#include <vector>
#include <algorithm>

// Structure to represent a task
struct Task {
    int duration;
    int deadline;
};

// Comparator function to sort tasks based on deadlines
bool compareTasks(const Task& t1, const Task& t2) {
    if (t1.deadline == t2.deadline) {
        return t1.duration < t2.duration;
    }
    return t1.deadline < t2.deadline;
}

// Function to select maximum tasks that can be completed without crossing their deadlines
std::vector<Task> selectTasks(const std::vector<Task>& tasks) {
    std::vector<Task> selectedTasks;

    // Sort tasks based on deadlines
    std::vector<Task> sortedTasks = tasks;
    std::sort(sortedTasks.begin(), sortedTasks.end(), compareTasks);

    // Iterate through tasks
    for (const Task& task : sortedTasks) {
        if (task.duration <= task.deadline) {
            selectedTasks.push_back(task);
            task.deadline -= task.duration;  // Update the deadline
        }
    }

    return selectedTasks;
}

// Utility function to print tasks
void printTasks(const std::vector<Task>& tasks) {
    std::cout << "Selected Tasks:\n";
    for (const Task& task : tasks) {
        std::cout << "Duration: " << task.duration << ", Deadline: " << task.deadline << "\n";
    }
}

int main() {
    // Example usage
    std::vector<Task> tasks = {
        {2, 4},
        {3, 3},
        {1, 5},
        {4, 2},
        {2, 1},
        {3, 6}
    };

    std::vector<Task> selectedTasks = selectTasks(tasks);
    printTasks(selectedTasks);

    return 0;
}
