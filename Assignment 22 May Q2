#include <bits/stdc++.h>

using namespace std;

/* This function will perform DFS. */
void dfs(int s, vector<bool> &vis, vector<int> adj[])
{
	vis[s] = true;
	for (auto it = adj[s].begin(); it != adj[s].end(); ++it)
		if (vis[*it] == false)
			dfs(*it, vis, adj);
}


/* function returns a mother vertex else returns -1 */
int findMother(vector<int> adj[], int V)
{
	vector<bool> vis(V, false);
	int v;
	
	for (int i = 0; i < V; i++)
	{
		if (vis[i] == false)
		{
			/* Performing DFS from every unvisited node. */
			dfs(i, vis, adj);
			v = i;
		}
	}
	fill(vis.begin(), vis.end(), false);
	dfs(v, vis, adj);
	/* If any vertex is not visited then return -1, No mother vertex found. */
	for (int i = 0; i < V; i++)
		if (vis[i] == false)
			return -1;
	return v;
}

int main()
{
	int V = 5;
	vector<int> adj[V];
	
	adj[0].push_back(2);
	adj[0].push_back(3);
	adj[1].push_back(0);
	adj[2].push_back(1);
	adj[3].push_back(4);
	
	cout << "Mother vertex in a graph: " << findMother(adj, V);

	return 0;
}
