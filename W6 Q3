#include <bits/stdc++.h>
using namespace std;

class Graph {
    int V;
    list<int> *adj;

public:
    Graph(int V);
    void addEdge(int v, int w);
    bool isCyclic();
    bool isCyclicUtil(int v, bool visited[], bool *rs);
};

Graph::Graph(int V) {
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v, int w) {
    adj[v].push_back(w);
}

bool Graph::isCyclicUtil(int v, bool visited[], bool *recStack) {
    visited[v] = true;
    recStack[v] = true;
    for (auto i = adj[v].begin(); i != adj[v].end(); ++i) {
        if (!visited[*i] && isCyclicUtil(*i, visited, recStack))
            return true;
        else if (recStack[*i])
            return true;
    }
    recStack[v] = false;
    return false;
}

bool Graph::isCyclic() {
    bool *visited = new bool[V];
    bool *recStack = new bool[V];
    for (int i = 0; i < V; i++) {
        visited[i] = false;
        recStack[i] = false;
    }
    for (int i = 0; i < V; i++)
        if (!visited[i] && isCyclicUtil(i, visited, recStack))
            return true;
    return false;
}

int main() {
    int V, E;
    cin >> V >> E;
    Graph g(V);
    for (int i = 0; i < E; i++) {
        int u, v;
        cin >> u >> v;
        g.addEdge(u, v);
    }
    if (g.isCyclic())
        cout << "The graph contains a cycle" << endl;
    else
        cout << "The graph does not contain a cycle" << endl;
    return 0;
}
